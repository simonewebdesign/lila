#!/usr/bin/env node
const net = require('net')
const serverArgs = process.argv.slice(3)
// console.log('[DEBUG!!]process.argv:',process.argv, process.argv.slice(3))
serverArgs.map(toURL)

function toURL(str) {
  // const s = str.trim()
  try {
    return new URL(str)
  } catch (err) {
    console.error(`lila error: Invalid URL: ${str}`)
    process.exit(1)
  }
}

const numberOfServers = serverArgs.length
let serverConnections = new Float32Array(numberOfServers)
let serverIndex = 0

const modeArg = process.argv[2] || 'round-robin'
const applyMode =
  modeArg === 'round-robin'
    ? () => {
      serverIndex >= numberOfServers - 1
        ? serverIndex = 0
        : serverIndex++
    }
    : () => { // least-connections
      setTimeout(() => {
        serverArgs.forEach(({ host, port }, index) => {
          const server = new net.Server({ })
          server.getConnections((error, count) => {
            if (error) {
              console.error('lila getConnections error:', error)
            } else {
              serverConnections[index] = count
            }
          })
        })
        serverIndex = serverConnections.indexOf(
          Math.min(...serverConnections)
        )
      }, 200)
    }

net
  .createServer((conn) => {
    conn.on('error', (err) => {
      console.error('lila socket error:', err)
    })

    const serverSocket = net.connect(8000 + serverIndex, '127.0.0.1', () => {
      conn.pipe(serverSocket)
      serverSocket.pipe(conn)
    })

    applyMode()
  })
  .listen(4444, () => {
    console.log('lila bound on http://127.0.0.1:4444')
  })
