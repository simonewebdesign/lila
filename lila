#!/usr/bin/env node

const net = require('net')
const serverArgs = process.argv.slice(3)
const serverURLs = serverArgs.map(toURL)

function toURL(str) {
  const s = str.trim()
  if (!s) {
    console.error('lila error: URL not provided')
    process.exit(1)
  }
  const [hostname, port] = s.split(':')
  if (!hostname || !port) {
    console.error('lila error: invalid URL:', s)
    process.exit(2)
  }
  return { hostname, port }
}

const numberOfServers = serverArgs.length
let serverConnections = new Float32Array(numberOfServers)
let serverIndex = 0

const modeArg = process.argv[2] || 'round-robin'
const applyMode =
  modeArg === 'round-robin'
    ? (socket) => {
      socket.on('connect', () => {
        serverIndex >= numberOfServers - 1
          ? serverIndex = 0
          : serverIndex++
      })
    }
    : (socket, idx) => { // least-connections
      socket
        .on('connect', () => {
          serverConnections[idx]++
        })
        .on('close', () => {
          serverConnections[idx]--
        })

      setTimeout(() => {
        serverIndex = serverConnections.indexOf(
          Math.min(...serverConnections)
        )
      }, 200)
    }

net
  .createServer((conn) => {
    conn.on('error', err => {
      console.error('lila socket error:', err)
    })

    const serverSocket = new net.Socket().on('error', err => {
      console.error('lila server socket error:', err)
    })
    applyMode(serverSocket, serverIndex)
    const { hostname, port } = serverURLs[serverIndex]
    serverSocket.connect(port, hostname, () => {
      conn.pipe(serverSocket)
      serverSocket.pipe(conn)
    })
  })
  .listen(4444, () => {
    console.log('lila accepting connections on port 4444')
  })
