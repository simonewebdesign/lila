#!/usr/bin/env node

const net = require('net')
const serverArgs = process.argv.slice(3)
const numberOfServers = serverArgs.length
let serverConnections = new Float32Array(numberOfServers)
let serverIndex = 0

const modeArg = process.argv[2] || 'round-robin'
const applyMode =
  modeArg === 'round-robin'
    ? (socket) => {
      socket.on('connect', () => {
        serverIndex >= numberOfServers - 1
          ? serverIndex = 0
          : serverIndex++
      })
    }
    : (socket, idx) => { // least-connections
      socket
        .on('connect', () => {
          serverConnections[idx]++
        })
        .on('close', () => {
          serverConnections[idx]--
        })

      setTimeout(() => {
        serverIndex = serverConnections.indexOf(
          Math.min(...serverConnections)
        )
      }, 200)
    }

net
  .createServer((conn) => {
    conn.on('error', (err) => {
      console.error('lila socket error:', err)
    })

    // TODO: this creates a new socket atm. See if you can reuse the same socket, by passing fd
    const serverSocket = new net.Socket()
    applyMode(serverSocket, serverIndex)
    serverSocket.connect(8000 + serverIndex, '127.0.0.1', () => {
      conn.pipe(serverSocket)
      serverSocket.pipe(conn)
    })
  })
  .listen(4444, () => {
    console.log('lila bound on http://127.0.0.1:4444')
  })
